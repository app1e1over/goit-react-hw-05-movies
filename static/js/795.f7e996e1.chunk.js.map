{"version":3,"file":"static/js/795.f7e996e1.chunk.js","mappings":"0LAIMA,GAAQC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAmCnB,UAlCA,WACE,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAiBC,EAAAA,EAAAA,QAAO,MACtBC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OA3B6B,OAAzBF,EAAeI,UACjBC,EAAAA,EAAAA,IAAcH,EAAS,QAAQI,MAAK,SAAAC,GAQtC,IAAoBC,IAPLD,EAAEE,KAQfC,QAAQC,IAAIH,GACZT,EACES,EAAOI,KAAI,SAAAC,GAAC,OACV,SAAClB,EAAD,CAEEmB,KAAMD,EAAEC,KACRC,aAAcF,EAAEE,aAChBC,UAAWH,EAAEG,WAHRH,EAAEI,GAFC,IATb,KAGHC,EAAAA,EAAAA,YAAU,WACRlB,EAAeI,QAAUN,CAC1B,GAAE,CAACA,KAeJoB,EAAAA,EAAAA,YAAU,WACRlB,EAAeI,QAAUN,CAC1B,GAAE,CAACA,KAEG,gBAAKqB,UAAU,mBAAf,SAAmCrB,GAC3C,C,oKCpCKsB,EAAM,4CAEL,SAASC,IACZ,OAAOC,EAAAA,EAAAA,IAAU,6CAA6CF,GAAKd,MAAK,SAAAiB,GAAC,OAAEA,EAAEC,KAAKC,OAAT,GAC5E,CACM,SAASC,EAAQT,GACpB,OAAOK,EAAAA,EAAAA,IAAU,sCAAsCL,EAAGG,GAAKd,MAAK,SAAAiB,GAAC,OAAEA,EAAEC,IAAJ,GACxE,CAEM,SAASG,EAASV,EAAIW,GACzB,MAAO,+BAA+BA,EAAMX,CAC/C,CAEM,SAASZ,EAAcY,EAAIY,GAI9B,MAHS,SAANA,IACCA,EAAI,WAEDP,EAAAA,EAAAA,IAAU,sCAAsCL,EAAG,IAAIY,EAAIT,GAAKd,MAAK,SAAAwB,GAAC,OAAEA,EAAEN,IAAJ,GAChF,CAEM,SAASO,EAAYC,GACxB,OAAOV,EAAAA,EAAAA,IAAU,4CAA4CF,EAAI,UAAUY,GAAO1B,MAAK,SAAAC,GAAC,OAAEA,EAAEiB,KAAKC,OAAT,GAE3F,C","sources":["components/Actors/Actors.js","javascript/MovieFetcher.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { getAdditional } from 'javascript/MovieFetcher';\nimport { lazy } from 'react';\nimport { useParams } from 'react-router-dom';\nconst Actor = lazy(() => import('components/Actor/Actor'))\nfunction Actors() {\n  const [values, setValues] = useState([]);\n  const previousValues = useRef(null);\n  const { movieId } = useParams();\n  if (previousValues.current===null) {\n    getAdditional(movieId, 'cast').then(v => {\n      drawActors(v.cast);\n    });\n  }\n\n  useEffect(() => {\n    previousValues.current = values;\n  }, [values]);\n  function drawActors(actors) {\n    console.log(actors);\n    setValues(\n      actors.map(a => (\n        <Actor\n          key={a.id}\n          name={a.name}\n          profile_path={a.profile_path}\n          character={a.character}\n        ></Actor>\n      ))\n    );\n  }\n\n  useEffect(() => {\n    previousValues.current = values;\n  }, [values]);\n  \n  return <div className='actors-container'>{values}</div>;\n}\n\nexport default Actors;\n","import axios from \"axios\";\nconst key = '?api_key=86578dfddf7782a9a93a7a7356ef0e77';\n\nexport function getPopular(){\n    return axios.get(\"https://api.themoviedb.org/3/movie/popular\"+key).then(r=>r.data.results)\n}\nexport function getById(id){\n    return axios.get(`https://api.themoviedb.org/3/movie/`+id+key).then(r=>r.data)\n}\n\nexport function getImage(id, width) {\n    return \"https://image.tmdb.org/t/p/w\"+width+id;\n}\n\nexport function getAdditional(id, add){\n    if(add===\"cast\"){\n        add=\"credits\"\n    }\n    return axios.get('https://api.themoviedb.org/3/movie/'+id+'/'+add+key).then(d=>d.data)\n}\n\nexport function findByQuery(query) {\n    return axios.get(\"https://api.themoviedb.org/3/search/movie\"+key+\"&query=\"+query).then(v=>v.data.results);\n    \n}"],"names":["Actor","lazy","useState","values","setValues","previousValues","useRef","movieId","useParams","current","getAdditional","then","v","actors","cast","console","log","map","a","name","profile_path","character","id","useEffect","className","key","getPopular","axios","r","data","results","getById","getImage","width","add","d","findByQuery","query"],"sourceRoot":""}